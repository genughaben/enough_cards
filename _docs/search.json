[
    {
        "objectID": "core.html",
        "href": "core.html",
        "title": "core",
        "section": "",
        "text": "foo\n\n foo ()"
    },
    {
        "objectID": "deck.html",
        "href": "deck.html",
        "title": "deck – A deck of playing cards",
        "section": "",
        "text": "source\n\nDeck\n\n Deck ()\n\nA deck of 52 cards\n\nsource\n\n\nDeck.shuffle\n\n Deck.shuffle ()\n\nRandomizes card order in deck\nA new deck contains all the cards:\nExamples\n\ndeck = Deck()\ndeck\n\n♣️2; ♣️3; ♣️4; ♣️5; ♣️6; ♣️7; ♣️8; ♣️9; ♣️10; ♣️J; ♣️Q; ♣️K; ♣️A; ♠️2; ♠️3; ♠️4; ♠️5; ♠️6; ♠️7; ♠️8; ♠️9; ♠️10; ♠️J; ♠️Q; ♠️K; ♠️A; ❤️2; ❤️3; ❤️4; ❤️5; ❤️6; ❤️7; ❤️8; ❤️9; ❤️10; ❤️J; ❤️Q; ❤️K; ❤️A; ♦️2; ♦️3; ♦️4; ♦️5; ♦️6; ♦️7; ♦️8; ♦️9; ♦️10; ♦️J; ♦️Q; ♦️K; ♦️A\n\n\nIt contains 52 cards.\n\nlen(deck)\n\n52\n\n\n\ntest_ne(len(deck), 51)\n\nWe can check if a specific cards (here Ace of Club) is in the deck.\n\nprint(Card(0,14))\nCard(1,14) in deck\n\n♣️A\n\n\nTrue\n\n\n\nsource\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\nRemove one card from the deck\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nThe index of the card to remove, defaulting to the last one\n\n\n\nExamples\nHere we the Ace of Hearts from the deck!\n\ndeck = Deck()\nace_of_hearts = deck.pop(38)\nace_of_hearts\n\n❤️A\n\n\n\n# Tests\ndeck = Deck()\ntest_eq(Card(2,14), deck.pop(38))\n\n\nsource\n\n\nDeck.remove\n\n Deck.remove (card:enough_cards.card.Card)\n\n\n\n\n\nType\nDetails\n\n\n\n\ncard\nCard\nCard to remove\n\n\n\nExamples\n\n# Tests\ndeck = Deck()\nremove_card = Card(2,14)\ndeck.remove(remove_card)\ntest_eq(51, len(deck))\ntest_ne(True, Card(2,14) in deck)\nassert remove_card not in deck\n\n\nsource\n\n\nDeck.draw\n\n Deck.draw (n:int=1, replace:bool=True)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nn\nint\n1\nNumber of cards to be drawn\n\n\nreplace\nbool\nTrue\nWhen true: drawn with replace, if false: not.\n\n\n\nExamples\n\n# drawn without replacement\ndeck = Deck()\ndeck.draw(10, False)\n\n[♣️A, ♠️A, ♦️J, ♣️4, ❤️2, ♦️4, ♦️10, ❤️K, ♠️3, ♦️6]\n\n\n\n# drawn with replacement\ndeck.draw(10)\n\n[♦️10, ❤️K, ♣️7, ♦️3, ♠️Q, ♠️K, ♠️K, ♠️10, ♣️J, ♦️J]"
    },
    {
        "objectID": "card.html",
        "href": "card.html",
        "title": "card – A playing card",
        "section": "",
        "text": "We will be using numbers to represent playing card suits and ranks. The suits are:\n\nsuits\n\n['♣️', '♠️', '❤️', '♦️']\n\n\nFor instance the suit at index 0 is:\n\nsuits[0]\n\nThe ranks are:\n\nranks\n\nFor instance the rank at index 1 (note that there is not aplyaing card at position 0, since we want the ranks to match the indices where possible):\n\nranks[14]\n\n\nsource\n\nCard\n\n Card (suit:int, rank:int)\n\nA playing card\n\n\n\n\nType\nDetails\n\n\n\n\nsuit\nint\nAn index into suits\n\n\nrank\nint\nAn index into ranks\n\n\n\nHere is an example creating an displaying card:\n\nc = Card(suit=1, rank=1)\n\n\nc\n\n\nprint(c)\n\n\n\nComparison operators\nEquality between two card is given by same suit and rank\n\nsource\n\nCard.__eq__\n\n Card.__eq__ (other:__main__.Card)\n\nReturn self==value.\n\nCard(suit=1, rank=1) == Card(suit=1, rank=1)\n\n\nCard(suit=1, rank=1) == Card(suit=2, rank=1)\n\n\n# Example\nCard(suit=1, rank=1) &lt; Card(suit=2, rank=2)\n\n\nsource\n\n\nCard.__lt__\n\n Card.__lt__ (other:__main__.Card)\n\nReturn self&lt;value.\n\nCard(suit=1, rank=1) &gt; Card(suit=2, rank=1)\n\n\nsource\n\n\nCard.__gt__\n\n Card.__gt__ (other:__main__.Card)\n\nReturn self&gt;value."
    },
    {
        "objectID": "index.html",
        "href": "index.html",
        "title": "enough_cards",
        "section": "",
        "text": "pip install enough_cards"
    },
    {
        "objectID": "index.html#install",
        "href": "index.html#install",
        "title": "enough_cards",
        "section": "",
        "text": "pip install enough_cards"
    },
    {
        "objectID": "index.html#how-to-use",
        "href": "index.html#how-to-use",
        "title": "enough_cards",
        "section": "How to use",
        "text": "How to use\nThe lib Card helps to create and compare playing cards\n\nCard(1,2)\n\n♠️2\n\n\n\nCard(1,2) &lt; Card(1,1)\n\nFalse"
    }
]
